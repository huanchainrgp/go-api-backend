basePath: /api/v1
definitions:
  models.Asset:
    properties:
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      description:
        example: Digital currency
        type: string
      id:
        example: 1
        type: integer
      is_active:
        example: true
        type: boolean
      name:
        example: Bitcoin
        type: string
      price:
        example: 50000
        type: number
      symbol:
        example: BTC
        type: string
      type:
        example: cryptocurrency
        type: string
      updated_at:
        example: "2023-01-01T00:00:00Z"
        type: string
    type: object
  models.AuthResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  models.CreateAssetRequest:
    properties:
      description:
        example: Digital currency
        type: string
      name:
        example: Bitcoin
        type: string
      price:
        example: 50000
        minimum: 0
        type: number
      symbol:
        example: BTC
        type: string
      type:
        example: cryptocurrency
        type: string
    required:
    - name
    - price
    - symbol
    - type
    type: object
  models.CreateTransactionRequest:
    properties:
      amount:
        example: 0.5
        minimum: 0
        type: number
      asset_id:
        example: 1
        type: integer
      description:
        example: Buying Bitcoin
        type: string
      price:
        example: 50000
        minimum: 0
        type: number
      type:
        enum:
        - buy
        - sell
        - transfer
        example: buy
        type: string
    required:
    - amount
    - asset_id
    - price
    - type
    type: object
  models.ErrorResponse:
    properties:
      error:
        example: Invalid request
        type: string
      message:
        example: The request body is invalid
        type: string
    type: object
  models.LoginRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: password123
        type: string
    required:
    - email
    - password
    type: object
  models.RegisterRequest:
    properties:
      email:
        example: user@example.com
        type: string
      first_name:
        example: John
        type: string
      last_name:
        example: Doe
        type: string
      password:
        example: password123
        minLength: 6
        type: string
      username:
        example: johndoe
        maxLength: 20
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  models.Transaction:
    properties:
      amount:
        example: 0.5
        type: number
      asset:
        $ref: '#/definitions/models.Asset'
      asset_id:
        example: 1
        type: integer
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      description:
        example: Buying Bitcoin
        type: string
      id:
        example: 1
        type: integer
      price:
        example: 50000
        type: number
      status:
        description: pending, completed, failed, cancelled
        example: completed
        type: string
      total_value:
        example: 25000
        type: number
      type:
        description: buy, sell, transfer
        example: buy
        type: string
      updated_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Relationships
      user_id:
        example: 1
        type: integer
    type: object
  models.UpdateAssetRequest:
    properties:
      description:
        example: Digital currency
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: Bitcoin
        type: string
      price:
        example: 50000
        type: number
      symbol:
        example: BTC
        type: string
      type:
        example: cryptocurrency
        type: string
    type: object
  models.UpdateTransactionRequest:
    properties:
      amount:
        example: 0.5
        type: number
      description:
        example: Buying Bitcoin
        type: string
      price:
        example: 50000
        type: number
      status:
        example: completed
        type: string
      type:
        example: buy
        type: string
    type: object
  models.UpdateUserRequest:
    properties:
      email:
        example: user@example.com
        type: string
      first_name:
        example: John
        type: string
      is_active:
        example: true
        type: boolean
      last_name:
        example: Doe
        type: string
      username:
        example: johndoe
        type: string
    type: object
  models.User:
    properties:
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      email:
        example: user@example.com
        type: string
      first_name:
        example: John
        type: string
      id:
        example: 1
        type: integer
      is_active:
        example: true
        type: boolean
      last_name:
        example: Doe
        type: string
      updated_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      username:
        example: johndoe
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A backend API with Users, Assets, and Transactions
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Go API Test1
  version: "1.0"
paths:
  /assets:
    get:
      consumes:
      - application/json
      description: Get a list of all assets
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Asset'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all assets
      tags:
      - assets
    post:
      consumes:
      - application/json
      description: Create a new asset
      parameters:
      - description: Asset data
        in: body
        name: asset
        required: true
        schema:
          $ref: '#/definitions/models.CreateAssetRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Asset'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create asset
      tags:
      - assets
  /assets/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific asset by its ID
      parameters:
      - description: Asset ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete asset
      tags:
      - assets
    get:
      consumes:
      - application/json
      description: Get a specific asset by its ID
      parameters:
      - description: Asset ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Asset'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get asset by ID
      tags:
      - assets
    put:
      consumes:
      - application/json
      description: Update a specific asset by its ID
      parameters:
      - description: Asset ID
        in: path
        name: id
        required: true
        type: integer
      - description: Asset update data
        in: body
        name: asset
        required: true
        schema:
          $ref: '#/definitions/models.UpdateAssetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Asset'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update asset
      tags:
      - assets
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a JWT token
      parameters:
      - description: User login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Login user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user account
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /transactions:
    get:
      consumes:
      - application/json
      description: Get a list of all transactions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Transaction'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all transactions
      tags:
      - transactions
    post:
      consumes:
      - application/json
      description: Create a new transaction
      parameters:
      - description: Transaction data
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/models.CreateTransactionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Transaction'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create transaction
      tags:
      - transactions
  /transactions/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific transaction by its ID
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete transaction
      tags:
      - transactions
    get:
      consumes:
      - application/json
      description: Get a specific transaction by its ID
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Transaction'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get transaction by ID
      tags:
      - transactions
    put:
      consumes:
      - application/json
      description: Update a specific transaction by its ID
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: integer
      - description: Transaction update data
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/models.UpdateTransactionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Transaction'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update transaction
      tags:
      - transactions
  /users:
    get:
      consumes:
      - application/json
      description: Get a list of all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get a specific user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update a specific user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User update data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
